window.cms=[],document.addEventListener("DOMContentLoaded",function(){var n=document.createElement("div");n.innerHtml="Hello I'm a component";new cms.Component;console.log("Hi")});
!function(n){n.Component=this}(window.cms);
var Person=function(){var t=0,i="John Doe";this.initialize=function(n,e){i=n||i,t=e||t},arguments.length&&this.initialize(),this.getName=function(){return i},this.setName=function(t){i=t},this.getAge=function(){return t},this.addBirthday=function(){t++},this.toString=function(){return"My name is "+this.getName()+"and I am "+t+" years old."}};
function helloWorld(){return"Hello world!"}function calculate(t,n){return t+n}function welcome(){return helloWorld()}window.cms=[],document.addEventListener("DOMContentLoaded",function(){var t=document.createElement("div");t.innerHtml="Hello I'm a component",new cms.Component,console.log("Hi")});var Component=function(t,n){cms.Component=this,this.element=t,this.cn=t.className,this.currentMode="edit",initialize(),this.initialize=function(t){this.addComponent()},this.setEdit=function(){this.currentMode="edit",toggleMode()},this.setPreview=function(){this.currentMode="publish",toggleMode()},this.toggleMode=function(){var n="edit"==this.currentMode?"publish":"edit";this.cn.indexOf(n)>-1&&t.classList.remove(n),t.classList.add(currentMode)},this.addComponent=function(){document.body.appendChild(t)}}(window.cms),Person=function(){var t=0,n="John Doe";this.initialize=function(e,i){n=e||n,t=i||t},arguments.length&&this.initialize(),this.getName=function(){return n},this.setName=function(t){n=t},this.getAge=function(){return t},this.addBirthday=function(){t++},this.toString=function(){return"My name is "+this.getName()+"and I am "+t+" years old."}};window.cms=[],document.addEventListener("DOMContentLoaded",function(){var t=document.createElement("div");t.innerHtml="Hello I'm a component",new cms.Component,console.log("Hi")});var Component=function(t,n){cms.Component=this,this.element=t,this.cn=t.className,this.currentMode="edit",initialize(),this.initialize=function(t){this.addComponent()},this.setEdit=function(){this.currentMode="edit",toggleMode()},this.setPreview=function(){this.currentMode="publish",toggleMode()},this.toggleMode=function(){var n="edit"==this.currentMode?"publish":"edit";this.cn.indexOf(n)>-1&&t.classList.remove(n),t.classList.add(currentMode)},this.addComponent=function(){document.body.appendChild(t)}}(window.cms),Person=function(){var t=0,n="John Doe";this.initialize=function(e,i){n=e||n,t=i||t},arguments.length&&this.initialize(),this.getName=function(){return n},this.setName=function(t){n=t},this.getAge=function(){return t},this.addBirthday=function(){t++},this.toString=function(){return"My name is "+this.getName()+"and I am "+t+" years old."}};window.cms=[],document.addEventListener("DOMContentLoaded",function(){var t=document.createElement("div");t.innerHtml="Hello I'm a component",new Component,console.log("Hi")});var Component=function(t,n){cms.Component=this,this.element=t,this.cn=t.className,this.currentMode="edit",initialize(),this.initialize=function(t){this.addComponent()},this.setEdit=function(){this.currentMode="edit",toggleMode()},this.setPreview=function(){this.currentMode="publish",toggleMode()},this.toggleMode=function(){var n="edit"==this.currentMode?"publish":"edit";this.cn.indexOf(n)>-1&&t.classList.remove(n),t.classList.add(currentMode)},this.addComponent=function(){document.body.appendChild(t)}}(cms),Person=function(){var t=0,n="John Doe";this.initialize=function(e,i){n=e||n,t=i||t},arguments.length&&this.initialize(),this.getName=function(){return n},this.setName=function(t){n=t},this.getAge=function(){return t},this.addBirthday=function(){t++},this.toString=function(){return"My name is "+this.getName()+"and I am "+t+" years old."}};document.addEventListener("DOMContentLoaded",function(){var t=document.createElement("div");t.innerHtml="Hello I'm a component",new Component,console.log("Hi")});var Component=function(t){this.element=t,this.cn=t.className,this.currentMode="edit",initialize(),this.initialize=function(t){this.addComponent()},this.setEdit=function(){this.currentMode="edit",toggleMode()},this.setPreview=function(){this.currentMode="publish",toggleMode()},this.toggleMode=function(){var n="edit"==this.currentMode?"publish":"edit";this.cn.indexOf(n)>-1&&t.classList.remove(n),t.classList.add(currentMode)},this.addComponent=function(){document.body.appendChild(t)}},Person=function(){var t=0,n="John Doe";this.initialize=function(e,i){n=e||n,t=i||t},arguments.length&&this.initialize(),this.getName=function(){return n},this.setName=function(t){n=t},this.getAge=function(){return t},this.addBirthday=function(){t++},this.toString=function(){return"My name is "+this.getName()+"and I am "+t+" years old."}};document.addEventListener("DOMContentLoaded",function(){var t=document.createElement("<div>");t.innerHtml="Hello I'm a component",new Component,console.log("Hi")});var Component=function(t){this.element=t,this.cn=t.className,this.currentMode="edit",initialize(),this.initialize=function(t){this.addComponent()},this.setEdit=function(){this.currentMode="edit",toggleMode()},this.setPreview=function(){this.currentMode="publish",toggleMode()},this.toggleMode=function(){var n="edit"==this.currentMode?"publish":"edit";this.cn.indexOf(n)>-1&&t.classList.remove(n),t.classList.add(currentMode)},this.addComponent=function(){document.body.appendChild(t)}},Person=function(){var t=0,n="John Doe";this.initialize=function(e,i){n=e||n,t=i||t},arguments.length&&this.initialize(),this.getName=function(){return n},this.setName=function(t){n=t},this.getAge=function(){return t},this.addBirthday=function(){t++},this.toString=function(){return"My name is "+this.getName()+"and I am "+t+" years old."}};document.addEventListener("DOMContentLoaded",function(){var t=document.createElement("<div>");t.innerHtml="Hello I'm a component",new Component,console.log("Hi")});var Component=function(t){this.element=t,this.cn=t.className,this.currentMode="edit",initialize(),this.initialize=function(t){this.addComponent()},this.setEdit=function(){this.currentMode="edit",toggleMode()},this.setPreview=function(){this.currentMode="publish",toggleMode()},this.toggleMode=function(){var n="edit"==this.currentMode?"publish":"edit";this.cn.indexOf(n)>-1&&t.classList.remove(n),t.classList.add(currentMode)},this.addComponent=function(){document.body.appendChild(t)}},Person=function(){var t=0,n="John Doe";this.initialize=function(e,i){n=e||n,t=i||t},arguments.length&&this.initialize(),this.getName=function(){return n},this.setName=function(t){n=t},this.getAge=function(){return t},this.addBirthday=function(){t++},this.toString=function(){return"My name is "+this.getName()+"and I am "+t+" years old."}};document.addEventListener("DOMContentLoaded",function(){var t=document.createElement("<div>");t.innerHtml="Hello I'm a component",new Component});var Component=function(t){this.element=t,this.cn=t.className,this.currentMode="edit",initialize(),this.initialize=function(t){this.addComponent()},this.setEdit=function(){this.currentMode="edit",toggleMode()},this.setPreview=function(){this.currentMode="publish",toggleMode()},this.toggleMode=function(){var n="edit"==this.currentMode?"publish":"edit";this.cn.indexOf(n)>-1&&t.classList.remove(n),t.classList.add(currentMode)},this.addComponent=function(){document.body.appendChild(t)}},Person=function(){var t=0,n="John Doe";this.initialize=function(e,i){n=e||n,t=i||t},arguments.length&&this.initialize(),this.getName=function(){return n},this.setName=function(t){n=t},this.getAge=function(){return t},this.addBirthday=function(){t++},this.toString=function(){return"My name is "+this.getName()+"and I am "+t+" years old."}},Person=function(){var t=0,n="John Doe";this.initialize=function(e,i){n=e||n,t=i||t},arguments.length&&this.initialize(),this.getName=function(){return n},this.setName=function(t){n=t},this.getAge=function(){return t},this.addBirthday=function(){t+=2},this.toString=function(){return"My name is "+this.getName()+"and I am "+t+" years old."}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
